/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package id.escritores;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.saxon.s9api.SaxonApiException;
import net.sf.saxon.trans.XPathException;
import org.jdom2.Document;

/**
 *
 * @author paulo
 */
public class Frame extends javax.swing.JFrame {
    private Map<String, String> data;
    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        adicionarEscritorDialog = new javax.swing.JDialog();
        nomeEscritorTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        adicionarEscritorButton = new javax.swing.JButton();
        removerEscritorDialog = new javax.swing.JDialog();
        nomeEscritorTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        removerEscritorButton = new javax.swing.JButton();
        pesquisarEscritorDialog = new javax.swing.JDialog();
        nomeEscritorTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pesquisarEscritorButton = new javax.swing.JButton();
        pesquisarNacionalidadeDialog = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        pesquisarNacionalidadeButton = new javax.swing.JButton();
        nomeNacionalidadeTextField = new javax.swing.JTextField();
        pesquisarObrasEscritorDialog = new javax.swing.JDialog();
        nomeEscritorTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        pesquisarObrasButton = new javax.swing.JButton();
        editarEscritorDialog = new javax.swing.JDialog();
        jLabel6 = new javax.swing.JLabel();
        alterarEscritorButton = new javax.swing.JButton();
        nomeEscritorTextField3 = new javax.swing.JTextField();
        nomeRadioButton = new javax.swing.JRadioButton();
        dNascimentoRadioButton = new javax.swing.JRadioButton();
        nacionalidadeRadioButton = new javax.swing.JRadioButton();
        ocupacaoRadioButton = new javax.swing.JRadioButton();
        dFalecimentoRadioButton = new javax.swing.JRadioButton();
        premiosRadioButton = new javax.swing.JRadioButton();
        gLiterarioRadioButton = new javax.swing.JRadioButton();
        alterarTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        enviarEscritorButton = new javax.swing.JButton();
        adicionarAtributoButton = new javax.swing.JButton();
        removerAtributoButton = new javax.swing.JButton();
        atributoTextField = new javax.swing.JTextField();
        buttonGroup = new javax.swing.ButtonGroup();
        editoraPrecoDialog = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        editoraTextField = new javax.swing.JTextField();
        precoTextField = new javax.swing.JTextField();
        pesquisarObraButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        principalMenu = new javax.swing.JMenu();
        abrirMenuItem = new javax.swing.JMenuItem();
        sairMenuItem = new javax.swing.JMenuItem();
        xmlMenu = new javax.swing.JMenu();
        adicionarEscritorMenuItem = new javax.swing.JMenuItem();
        removerEscritorMenuItem = new javax.swing.JMenuItem();
        editarEscritorMenuItem = new javax.swing.JMenuItem();
        xPathMenu = new javax.swing.JMenu();
        pesquisarEscritorMenuItem = new javax.swing.JMenuItem();
        pesquisarNacionalidadeMenuItem = new javax.swing.JMenuItem();
        pesquisarObrasEscritorMenuItem = new javax.swing.JMenuItem();
        escritorPremiadoMenuItem = new javax.swing.JMenuItem();
        editoraPrecoMenuItem = new javax.swing.JMenuItem();
        avgPrecoMenuItem = new javax.swing.JMenuItem();
        validarMenu = new javax.swing.JMenu();
        DTDMenuItem = new javax.swing.JMenuItem();
        XSDMenuItem = new javax.swing.JMenuItem();
        XLSTMenu = new javax.swing.JMenu();
        htmlEscritoresFotosMenuItem = new javax.swing.JMenuItem();
        listagemEscritoresMenuItem = new javax.swing.JMenuItem();
        XQueryMenu = new javax.swing.JMenu();
        topObrasMenuItem = new javax.swing.JMenuItem();

        adicionarEscritorDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                adicionarEscritorDialogComponentHidden(evt);
            }
        });

        nomeEscritorTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeEscritorTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Nome do Escritor:");

        adicionarEscritorButton.setText("Adicionar Autor");
        adicionarEscritorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarEscritorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adicionarEscritorDialogLayout = new javax.swing.GroupLayout(adicionarEscritorDialog.getContentPane());
        adicionarEscritorDialog.getContentPane().setLayout(adicionarEscritorDialogLayout);
        adicionarEscritorDialogLayout.setHorizontalGroup(
            adicionarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adicionarEscritorDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nomeEscritorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(adicionarEscritorDialogLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(adicionarEscritorButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        adicionarEscritorDialogLayout.setVerticalGroup(
            adicionarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adicionarEscritorDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(adicionarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeEscritorTextField)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(adicionarEscritorButton)
                .addGap(16, 16, 16))
        );

        nomeEscritorTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeEscritorTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Nome do Escritor:");

        removerEscritorButton.setText("Remover Autor");
        removerEscritorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerEscritorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout removerEscritorDialogLayout = new javax.swing.GroupLayout(removerEscritorDialog.getContentPane());
        removerEscritorDialog.getContentPane().setLayout(removerEscritorDialogLayout);
        removerEscritorDialogLayout.setHorizontalGroup(
            removerEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, removerEscritorDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nomeEscritorTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(removerEscritorDialogLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(removerEscritorButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        removerEscritorDialogLayout.setVerticalGroup(
            removerEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, removerEscritorDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(removerEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeEscritorTextField1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(removerEscritorButton)
                .addGap(16, 16, 16))
        );

        nomeEscritorTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeEscritorTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Nome do Escritor:");

        pesquisarEscritorButton.setText("Pesquisar Autor");
        pesquisarEscritorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarEscritorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pesquisarEscritorDialogLayout = new javax.swing.GroupLayout(pesquisarEscritorDialog.getContentPane());
        pesquisarEscritorDialog.getContentPane().setLayout(pesquisarEscritorDialogLayout);
        pesquisarEscritorDialogLayout.setHorizontalGroup(
            pesquisarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pesquisarEscritorDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nomeEscritorTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(pesquisarEscritorDialogLayout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addComponent(pesquisarEscritorButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pesquisarEscritorDialogLayout.setVerticalGroup(
            pesquisarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pesquisarEscritorDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pesquisarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeEscritorTextField2)
                    .addComponent(jLabel4))
                .addGap(30, 30, 30)
                .addComponent(pesquisarEscritorButton)
                .addContainerGap())
        );

        jLabel5.setText("Nacionalidade:");

        pesquisarNacionalidadeButton.setText("Pesquisar Nacionalidade");
        pesquisarNacionalidadeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarNacionalidadeButtonActionPerformed(evt);
            }
        });

        nomeNacionalidadeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeNacionalidadeTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pesquisarNacionalidadeDialogLayout = new javax.swing.GroupLayout(pesquisarNacionalidadeDialog.getContentPane());
        pesquisarNacionalidadeDialog.getContentPane().setLayout(pesquisarNacionalidadeDialogLayout);
        pesquisarNacionalidadeDialogLayout.setHorizontalGroup(
            pesquisarNacionalidadeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pesquisarNacionalidadeDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nomeNacionalidadeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(pesquisarNacionalidadeDialogLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(pesquisarNacionalidadeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pesquisarNacionalidadeDialogLayout.setVerticalGroup(
            pesquisarNacionalidadeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pesquisarNacionalidadeDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pesquisarNacionalidadeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeNacionalidadeTextField)
                    .addComponent(jLabel5))
                .addGap(29, 29, 29)
                .addComponent(pesquisarNacionalidadeButton)
                .addContainerGap())
        );

        nomeEscritorTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeEscritorTextField4ActionPerformed(evt);
            }
        });

        jLabel8.setText("Nome do Escritor:");

        pesquisarObrasButton.setText("Pesquisar Obras");
        pesquisarObrasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarObrasButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pesquisarObrasEscritorDialogLayout = new javax.swing.GroupLayout(pesquisarObrasEscritorDialog.getContentPane());
        pesquisarObrasEscritorDialog.getContentPane().setLayout(pesquisarObrasEscritorDialogLayout);
        pesquisarObrasEscritorDialogLayout.setHorizontalGroup(
            pesquisarObrasEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pesquisarObrasEscritorDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nomeEscritorTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(pesquisarObrasEscritorDialogLayout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(pesquisarObrasButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pesquisarObrasEscritorDialogLayout.setVerticalGroup(
            pesquisarObrasEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pesquisarObrasEscritorDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pesquisarObrasEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeEscritorTextField4)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(pesquisarObrasButton)
                .addContainerGap())
        );

        jLabel6.setText("Nome do Escritor:");

        alterarEscritorButton.setText("Alterar Informação");
        alterarEscritorButton.setEnabled(false);
        alterarEscritorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarEscritorButtonActionPerformed(evt);
            }
        });

        nomeEscritorTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeEscritorTextField3ActionPerformed(evt);
            }
        });

        nomeRadioButton.setText("Nome");
        nomeRadioButton.setEnabled(false);

        dNascimentoRadioButton.setText("Data de Nascimento");
        dNascimentoRadioButton.setEnabled(false);

        nacionalidadeRadioButton.setText("Nacionalidade");
        nacionalidadeRadioButton.setEnabled(false);

        ocupacaoRadioButton.setText("Ocupações");
        ocupacaoRadioButton.setEnabled(false);

        dFalecimentoRadioButton.setText("Data de Falecimento");
        dFalecimentoRadioButton.setEnabled(false);

        premiosRadioButton.setText("Prémios");
        premiosRadioButton.setEnabled(false);

        gLiterarioRadioButton.setText("Género Literário");
        gLiterarioRadioButton.setEnabled(false);

        alterarTextField.setEnabled(false);

        jLabel7.setText("Alterar:");

        enviarEscritorButton.setText("Enviar Nome");
        enviarEscritorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarEscritorButtonActionPerformed(evt);
            }
        });

        adicionarAtributoButton.setText("Adicionar");
        adicionarAtributoButton.setEnabled(false);
        adicionarAtributoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarAtributoButtonActionPerformed(evt);
            }
        });

        removerAtributoButton.setText("Remover ");
        removerAtributoButton.setEnabled(false);
        removerAtributoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerAtributoButtonActionPerformed(evt);
            }
        });

        atributoTextField.setEnabled(false);

        javax.swing.GroupLayout editarEscritorDialogLayout = new javax.swing.GroupLayout(editarEscritorDialog.getContentPane());
        editarEscritorDialog.getContentPane().setLayout(editarEscritorDialogLayout);
        editarEscritorDialogLayout.setHorizontalGroup(
            editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editarEscritorDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dFalecimentoRadioButton)
                        .addGroup(editarEscritorDialogLayout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(nomeEscritorTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(editarEscritorDialogLayout.createSequentialGroup()
                            .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nacionalidadeRadioButton)
                                .addComponent(dNascimentoRadioButton)
                                .addComponent(nomeRadioButton))
                            .addGap(66, 66, 66)
                            .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(premiosRadioButton)
                                .addComponent(ocupacaoRadioButton)
                                .addComponent(gLiterarioRadioButton)))
                        .addComponent(alterarTextField)))
                .addContainerGap())
            .addGroup(editarEscritorDialogLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(editarEscritorDialogLayout.createSequentialGroup()
                        .addComponent(enviarEscritorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(alterarEscritorButton)
                        .addGap(38, 38, 38))
                    .addGroup(editarEscritorDialogLayout.createSequentialGroup()
                        .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(adicionarAtributoButton)
                            .addComponent(removerAtributoButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(atributoTextField)
                        .addContainerGap())))
        );
        editarEscritorDialogLayout.setVerticalGroup(
            editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editarEscritorDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeEscritorTextField3)
                    .addComponent(jLabel6))
                .addGap(43, 43, 43)
                .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeRadioButton)
                    .addComponent(ocupacaoRadioButton))
                .addGap(18, 18, 18)
                .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nacionalidadeRadioButton)
                    .addComponent(gLiterarioRadioButton))
                .addGap(18, 18, 18)
                .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dNascimentoRadioButton)
                    .addComponent(premiosRadioButton))
                .addGap(18, 18, 18)
                .addComponent(dFalecimentoRadioButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alterarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enviarEscritorButton)
                    .addComponent(alterarEscritorButton))
                .addGroup(editarEscritorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editarEscritorDialogLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(adicionarAtributoButton)
                        .addGap(12, 12, 12)
                        .addComponent(removerAtributoButton))
                    .addGroup(editarEscritorDialogLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(atributoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );

        jLabel9.setText("Nome da editora:");

        jLabel10.setText("Preço mínimo:");

        pesquisarObraButton.setText("Pesquisar Obra");
        pesquisarObraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarObraButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editoraPrecoDialogLayout = new javax.swing.GroupLayout(editoraPrecoDialog.getContentPane());
        editoraPrecoDialog.getContentPane().setLayout(editoraPrecoDialogLayout);
        editoraPrecoDialogLayout.setHorizontalGroup(
            editoraPrecoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editoraPrecoDialogLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(editoraPrecoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editoraPrecoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editoraTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                    .addComponent(precoTextField))
                .addContainerGap())
            .addGroup(editoraPrecoDialogLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(pesquisarObraButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        editoraPrecoDialogLayout.setVerticalGroup(
            editoraPrecoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editoraPrecoDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editoraPrecoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(editoraTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(editoraPrecoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(precoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pesquisarObraButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputTextArea.setEditable(false);
        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        jLabel1.setText("Output:");

        principalMenu.setText("Principal");
        principalMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principalMenuActionPerformed(evt);
            }
        });

        abrirMenuItem.setText("Abrir");
        abrirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMenuItemActionPerformed(evt);
            }
        });
        principalMenu.add(abrirMenuItem);

        sairMenuItem.setText("Sair");
        sairMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairMenuItemActionPerformed(evt);
            }
        });
        principalMenu.add(sairMenuItem);

        jMenuBar1.add(principalMenu);

        xmlMenu.setText("XML");

        adicionarEscritorMenuItem.setText("Adicionar Autor");
        adicionarEscritorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarEscritorMenuItemActionPerformed(evt);
            }
        });
        xmlMenu.add(adicionarEscritorMenuItem);

        removerEscritorMenuItem.setText("Remover Autor");
        removerEscritorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerEscritorMenuItemActionPerformed(evt);
            }
        });
        xmlMenu.add(removerEscritorMenuItem);

        editarEscritorMenuItem.setText("Editar escritor");
        editarEscritorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarEscritorMenuItemActionPerformed(evt);
            }
        });
        xmlMenu.add(editarEscritorMenuItem);

        jMenuBar1.add(xmlMenu);

        xPathMenu.setText("XPath");

        pesquisarEscritorMenuItem.setText("Pesquisar por escritor");
        pesquisarEscritorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarEscritorMenuItemActionPerformed(evt);
            }
        });
        xPathMenu.add(pesquisarEscritorMenuItem);

        pesquisarNacionalidadeMenuItem.setText("Pesquisar por nacionalidade");
        pesquisarNacionalidadeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarNacionalidadeMenuItemActionPerformed(evt);
            }
        });
        xPathMenu.add(pesquisarNacionalidadeMenuItem);

        pesquisarObrasEscritorMenuItem.setText("Pesquisar obras por escritor");
        pesquisarObrasEscritorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarObrasEscritorMenuItemActionPerformed(evt);
            }
        });
        xPathMenu.add(pesquisarObrasEscritorMenuItem);

        escritorPremiadoMenuItem.setText("Pesquisar escritor mais premiado");
        escritorPremiadoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escritorPremiadoMenuItemActionPerformed(evt);
            }
        });
        xPathMenu.add(escritorPremiadoMenuItem);

        editoraPrecoMenuItem.setText("Pesquisar obras por editora e preço");
        editoraPrecoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editoraPrecoMenuItemActionPerformed(evt);
            }
        });
        xPathMenu.add(editoraPrecoMenuItem);

        avgPrecoMenuItem.setText("Pesquisar média de preço das obras de escritores com prémios");
        avgPrecoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgPrecoMenuItemActionPerformed(evt);
            }
        });
        xPathMenu.add(avgPrecoMenuItem);

        jMenuBar1.add(xPathMenu);

        validarMenu.setText("Validar");

        DTDMenuItem.setText("DTD");
        validarMenu.add(DTDMenuItem);

        XSDMenuItem.setText("XSD");
        validarMenu.add(XSDMenuItem);

        jMenuBar1.add(validarMenu);

        XLSTMenu.setText("XLST");
        XLSTMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XLSTMenuActionPerformed(evt);
            }
        });

        htmlEscritoresFotosMenuItem.setText("HTML Escritores e Fotos");
        htmlEscritoresFotosMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htmlEscritoresFotosMenuItemActionPerformed(evt);
            }
        });
        XLSTMenu.add(htmlEscritoresFotosMenuItem);

        listagemEscritoresMenuItem.setText("Listagem de Escritores");
        listagemEscritoresMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listagemEscritoresMenuItemActionPerformed(evt);
            }
        });
        XLSTMenu.add(listagemEscritoresMenuItem);

        jMenuBar1.add(XLSTMenu);

        XQueryMenu.setText("XQuery");

        topObrasMenuItem.setText("Top 5 Obras mais caras");
        topObrasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topObrasMenuItemActionPerformed(evt);
            }
        });
        XQueryMenu.add(topObrasMenuItem);

        jMenuBar1.add(XQueryMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMenuItemActionPerformed
        // TODO add your handling code here:
        
        String texto;
        jFileChooser1.showOpenDialog(this);
        String nomeF= jFileChooser1.getSelectedFile().getAbsolutePath();
        try {
            texto=Functions.ler_ficheiro(nomeF);
            if (texto == null){
                JOptionPane.showMessageDialog(this,
                        "Apenas ficheiros XML podem ser abertos!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
            }
            outputTextArea.setText(texto);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirMenuItemActionPerformed

    private void principalMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_principalMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_principalMenuActionPerformed

    private void sairMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairMenuItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_sairMenuItemActionPerformed

    private void adicionarEscritorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarEscritorMenuItemActionPerformed
        adicionarEscritorDialog.setSize(500, 200);
        adicionarEscritorDialog.setLocation(200, 200);
        adicionarEscritorDialog.setVisible(true);
    }//GEN-LAST:event_adicionarEscritorMenuItemActionPerformed

    private void nomeEscritorTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeEscritorTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeEscritorTextFieldActionPerformed

    private void adicionarEscritorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarEscritorButtonActionPerformed
        try {
            Escritores escritor = Wrappers.criaEscritor(nomeEscritorTextField.getText());
            
            if(escritor != null){
                
                Document docEscritor = XMLJDomFunctions.lerDocumentoXML("escritores.xml");
                
                List<Obra> obras = Wrappers.criaObra(nomeEscritorTextField.getText(), escritor.getId());
                
                Document docObras = XMLJDomFunctions.lerDocumentoXML("obras.xml");
                
                if (obras != null && !obras.isEmpty()) {
                    for (Obra obra : obras) {

                        docObras = ObrasXML.adicionaObras(obra, docObras);
                        XMLJDomFunctions.escreverDocumentoParaFicheiro(docObras, "obras.xml");
                    }
                    
                    
                    docEscritor = EscritoresXML.adicionaEscritor(escritor, docEscritor);

                    XMLJDomFunctions.escreverDocumentoParaFicheiro(docEscritor, "escritores.xml");
                    
                    JOptionPane.showMessageDialog(this,
                        "Autor e obras adicionadas com sucesso",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
                    
                    String texto;
                    try {
                        texto = Functions.ler_ficheiro("escritores.xml");
                        if (texto != null){
                            outputTextArea.setText(texto);
                        }
                        
                        texto = Functions.ler_ficheiro("obras.xml");
                        if (texto != null){
                            outputTextArea.append("\n\n" + texto);
                        }
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this,
                        "Obras não encontradas",
                        "Informação",
                        JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "Escritor já existe no ficheiro",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
            }
            adicionarEscritorDialog.setVisible(false);
            nomeEscritorTextField.setText("");
        } catch (IOException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SaxonApiException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_adicionarEscritorButtonActionPerformed

    private void nomeEscritorTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeEscritorTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeEscritorTextField1ActionPerformed

    private void removerEscritorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerEscritorButtonActionPerformed
        Document doc = XMLJDomFunctions.lerDocumentoXML("escritores.xml");
        if(doc == null) {
            JOptionPane.showMessageDialog(this,
                    "Ainda não existe ecritores adicionados",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {

            //Chama a função para remover  livros ao XML
            doc = EscritoresXML.removeEscritor(nomeEscritorTextField1.getText(), doc);
            //grava o ficheiro XML em disco
            if (doc != null) {
                XMLJDomFunctions.escreverDocumentoParaFicheiro(doc, "escritores.xml");
                removerEscritorDialog.setVisible(false);
                JOptionPane.showMessageDialog(this,
                        "Escritor e Obras removidos com sucesso",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
                nomeEscritorTextField1.setText("");
                String texto;
                try {
                    texto = Functions.ler_ficheiro("escritores.xml");
                    if (texto != null){
                        outputTextArea.setText(texto);
                    }

                    texto = Functions.ler_ficheiro("obras.xml");
                    if (texto != null){
                        outputTextArea.append("\n\n" + texto);
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                removerEscritorDialog.setVisible(false);
                JOptionPane.showMessageDialog(this,
                        "Escritor não encontrado",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
                nomeEscritorTextField1.setText("");
            }
        }
    }//GEN-LAST:event_removerEscritorButtonActionPerformed

    private void removerEscritorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerEscritorMenuItemActionPerformed
        removerEscritorDialog.setSize(500, 200);
        removerEscritorDialog.setLocation(200, 200);
        removerEscritorDialog.setVisible(true);
    }//GEN-LAST:event_removerEscritorMenuItemActionPerformed

    private void pesquisarEscritorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarEscritorMenuItemActionPerformed
        pesquisarEscritorDialog.setSize(500, 200);
        pesquisarEscritorDialog.setLocation(200, 200);
        pesquisarEscritorDialog.setVisible(true);
    }//GEN-LAST:event_pesquisarEscritorMenuItemActionPerformed

    private void nomeEscritorTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeEscritorTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeEscritorTextField2ActionPerformed

    private void pesquisarEscritorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarEscritorButtonActionPerformed

        try {
           List<String> results = XPathFunctions.pesquisa_nome_autor(nomeEscritorTextField2.getText());
           
           if(results != null){
                outputTextArea.setText("Informação do autor " + nomeEscritorTextField2.getText() + ":\n\n");
                for (String result : results) {
                    outputTextArea.append(result + "\n");
                }
                
                nomeEscritorTextField2.setText("");
                pesquisarEscritorDialog.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this,
                    "Escritor não encontrado",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
                nomeEscritorTextField2.setText("");
            }
        } catch (SaxonApiException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pesquisarEscritorButtonActionPerformed

    private void pesquisarNacionalidadeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarNacionalidadeButtonActionPerformed
        try {
            List<String> results = XPathFunctions.pesquisa_nacionalidade_autor(nomeNacionalidadeTextField.getText());
            if(results != null){
                outputTextArea.setText("Autores " + nomeNacionalidadeTextField.getText() + ":\n\n");
                for (String result : results) {
                    outputTextArea.append(result + "\n");
                }
                
                nomeNacionalidadeTextField.setText("");
                pesquisarNacionalidadeDialog.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this,
                    "Nacionalidade não encontrada",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
                nomeNacionalidadeTextField.setText("");
            }
        } catch (SaxonApiException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pesquisarNacionalidadeButtonActionPerformed

    private void nomeNacionalidadeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeNacionalidadeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeNacionalidadeTextFieldActionPerformed

    private void pesquisarNacionalidadeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarNacionalidadeMenuItemActionPerformed
        pesquisarNacionalidadeDialog.setSize(500, 200);
        pesquisarNacionalidadeDialog.setLocation(200, 200);
        pesquisarNacionalidadeDialog.setVisible(true);
    }//GEN-LAST:event_pesquisarNacionalidadeMenuItemActionPerformed

    private void alterarEscritorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarEscritorButtonActionPerformed
        Document doc = XMLJDomFunctions.lerDocumentoXML("escritores.xml");
        
        if(doc == null) {
            JOptionPane.showMessageDialog(this,
                    "Ainda não existe ecritores adicionados",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            
            if (nomeRadioButton.isSelected()) {

                doc = EscritoresXML.editaInformacaoEscritor(nomeEscritorTextField3.getText(),"nome",alterarTextField.getText(),doc);
            } else if (nacionalidadeRadioButton.isSelected()) {

                doc = EscritoresXML.editaInformacaoEscritor(nomeEscritorTextField3.getText(),"nacionalidade",alterarTextField.getText(),doc);
            } else if (dNascimentoRadioButton.isSelected()) {

                doc = EscritoresXML.editaInformacaoEscritor(nomeEscritorTextField3.getText(), "datanascimento", alterarTextField.getText(), doc);
            } else if (dFalecimentoRadioButton.isSelected()) {

                doc = EscritoresXML.editaInformacaoEscritor(nomeEscritorTextField3.getText(), "datafalecimento", alterarTextField.getText(), doc);
            }

            if(doc != null){
                XMLJDomFunctions.escreverDocumentoParaFicheiro(doc, "escritores.xml");
                JOptionPane.showMessageDialog(this,
                        "Informação atualizada",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
                String texto;
                try {
                    texto = Functions.ler_ficheiro("escritores.xml");
                    if (texto != null){
                        outputTextArea.setText(texto);
                    }  
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            } else {

                JOptionPane.showMessageDialog(this,
                        "Escritor não encontrado",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
            }

            nomeEscritorTextField3.setText("");
            alterarTextField.setText("");


            nomeRadioButton.setSelected(false);
            nacionalidadeRadioButton.setSelected(false);
            dNascimentoRadioButton.setSelected(false);
            dFalecimentoRadioButton.setSelected(false);
            gLiterarioRadioButton.setSelected(false);
            ocupacaoRadioButton.setSelected(false);
            premiosRadioButton.setSelected(false);

            nomeEscritorTextField3.setEditable(true);
            alterarTextField.setEnabled(false);
            alterarEscritorButton.setEnabled(false);

            buttonGroup.clearSelection();

            nomeRadioButton.setEnabled(false);
            nacionalidadeRadioButton.setEnabled(false);
            dNascimentoRadioButton.setEnabled(false);
            dFalecimentoRadioButton.setEnabled(false);
            gLiterarioRadioButton.setEnabled(false);
            ocupacaoRadioButton.setEnabled(false);
            premiosRadioButton.setEnabled(false);

            enviarEscritorButton.setEnabled(true);
        }
    }//GEN-LAST:event_alterarEscritorButtonActionPerformed

    private void nomeEscritorTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeEscritorTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeEscritorTextField3ActionPerformed

    private void enviarEscritorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarEscritorButtonActionPerformed
        Document doc = XMLJDomFunctions.lerDocumentoXML("escritores.xml");
        if(doc == null) {
            JOptionPane.showMessageDialog(this,
                    "Ainda não existe ecritores adicionados",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            data = EscritoresXML.verificaEscritor(nomeEscritorTextField3.getText(), doc);
            if(data != null){
                nomeEscritorTextField3.setEditable(false);
                alterarTextField.setEnabled(true);
                enviarEscritorButton.setEnabled(false);
                if (data.containsKey("nome")) {
                    nomeRadioButton.setEnabled(true);
                    buttonGroup.add(nomeRadioButton);
                }
                if (data.containsKey("nacionalidade")) {
                    nacionalidadeRadioButton.setEnabled(true);
                    buttonGroup.add(nacionalidadeRadioButton);
                }
                if (data.containsKey("datanascimento")) {
                    dNascimentoRadioButton.setEnabled(true);
                    buttonGroup.add(dNascimentoRadioButton);
                }
                if (data.containsKey("datafalecimento")) {
                    dFalecimentoRadioButton.setEnabled(true);
                    buttonGroup.add(dFalecimentoRadioButton);
                }
                if (data.containsKey("generoliterario")) {
                    gLiterarioRadioButton.setEnabled(true);
                    buttonGroup.add(gLiterarioRadioButton);
                }
                if (data.containsKey("ocupacoes")) {
                    ocupacaoRadioButton.setEnabled(true);
                    buttonGroup.add(ocupacaoRadioButton);
                }
                if (data.containsKey("premios")) {
                    premiosRadioButton.setEnabled(true);
                    buttonGroup.add(premiosRadioButton);
                }

                nomeRadioButton.addActionListener((ActionEvent e) -> {
                    alterarTextField.setText(data.get("nome"));
                    alterarEscritorButton.setEnabled(true);
                    adicionarAtributoButton.setEnabled(false);
                    removerAtributoButton.setEnabled(false);
                    atributoTextField.setEnabled(false);
                    atributoTextField.setText("");
                });

                nacionalidadeRadioButton.addActionListener((ActionEvent e) -> {
                    alterarTextField.setText(data.get("nacionalidade"));
                    alterarEscritorButton.setEnabled(true);
                    adicionarAtributoButton.setEnabled(false);
                    removerAtributoButton.setEnabled(false);
                    atributoTextField.setEnabled(false);
                    atributoTextField.setText("");
                });

                dNascimentoRadioButton.addActionListener((ActionEvent e) -> {
                    alterarTextField.setText(data.get("datanascimento"));
                    alterarEscritorButton.setEnabled(true);
                    adicionarAtributoButton.setEnabled(false);
                    removerAtributoButton.setEnabled(false);
                    atributoTextField.setEnabled(false);
                    atributoTextField.setText("");
                });

                dFalecimentoRadioButton.addActionListener((ActionEvent e) -> {
                    alterarTextField.setText(data.get("datafalecimento"));
                    alterarEscritorButton.setEnabled(true);
                    adicionarAtributoButton.setEnabled(false);
                    removerAtributoButton.setEnabled(false);
                    atributoTextField.setEnabled(false);
                    atributoTextField.setText("");
                });

                ocupacaoRadioButton.addActionListener((ActionEvent e) -> {
                    alterarTextField.setText(data.get("ocupacoes"));
                    alterarEscritorButton.setEnabled(false);
                    adicionarAtributoButton.setEnabled(true);
                    removerAtributoButton.setEnabled(true);
                    atributoTextField.setEnabled(true);
                    alterarTextField.setEnabled(false);
                });

                premiosRadioButton.addActionListener((ActionEvent e) -> {
                    alterarTextField.setText(data.get("premios"));
                    alterarEscritorButton.setEnabled(false);
                    adicionarAtributoButton.setEnabled(true);
                    removerAtributoButton.setEnabled(true);
                    atributoTextField.setEnabled(true);
                    alterarTextField.setEnabled(false);
                });
            
                gLiterarioRadioButton.addActionListener((ActionEvent e) -> {
                    alterarTextField.setText(data.get("generoliterario"));
                    alterarEscritorButton.setEnabled(false);
                    adicionarAtributoButton.setEnabled(true);
                    removerAtributoButton.setEnabled(true);
                    atributoTextField.setEnabled(true);
                    alterarTextField.setEnabled(false);
                });
            } else {
                JOptionPane.showMessageDialog(this,
                            "Esritor não encontrada",
                            "Informação",
                            JOptionPane.INFORMATION_MESSAGE);
                
                nomeEscritorTextField3.setText("");
                nomeEscritorTextField3.setEnabled(true);
            }  
        }
    }//GEN-LAST:event_enviarEscritorButtonActionPerformed

    private void editarEscritorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarEscritorMenuItemActionPerformed
        editarEscritorDialog.setSize(500, 500);
        editarEscritorDialog.setLocation(200, 200);
        editarEscritorDialog.setVisible(true);
    }//GEN-LAST:event_editarEscritorMenuItemActionPerformed

    private void nomeEscritorTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeEscritorTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeEscritorTextField4ActionPerformed

    private void pesquisarObrasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarObrasButtonActionPerformed
        Document doc = XMLJDomFunctions.lerDocumentoXML("escritores.xml");
        String id = null;
        if(doc != null){
            id = EscritoresXML.getIdEscritor(nomeEscritorTextField4.getText(), doc);
            
            if(id != null){
                try {
                    List<String> results = XPathFunctions.pesquisa_obras_autor(id);
                    if(results != null){
                        outputTextArea.setText("Obras do escritor " + nomeEscritorTextField4.getText() + ":\n\n");
                        for (String result : results) {
                            outputTextArea.append(result);
                        }

                        nomeEscritorTextField4.setText("");
                        pesquisarObrasEscritorDialog.setVisible(false);
                    } else {
                        JOptionPane.showMessageDialog(this,
                            "Obras não encontradas",
                            "Informação",
                            JOptionPane.INFORMATION_MESSAGE);
                        nomeEscritorTextField4.setText("");
                    }
                } catch (SaxonApiException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                    "Escritor não encontrado",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Ainda não existe ecritores adicionados",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_pesquisarObrasButtonActionPerformed

    private void pesquisarObrasEscritorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarObrasEscritorMenuItemActionPerformed
        pesquisarObrasEscritorDialog.setSize(500, 200);
        pesquisarObrasEscritorDialog.setLocation(200, 200);
        pesquisarObrasEscritorDialog.setVisible(true);
    }//GEN-LAST:event_pesquisarObrasEscritorMenuItemActionPerformed

    private void escritorPremiadoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escritorPremiadoMenuItemActionPerformed
        
        try {
            String resultado = XPathFunctions.escritor_mais_premiado();
            if(resultado != null){
               JOptionPane.showMessageDialog(this,
                    "O escritor com mais prémios é: " + resultado,
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE); 
            } else {
                JOptionPane.showMessageDialog(this,
                    "Ainda não existe ecritores com prémios",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (SaxonApiException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_escritorPremiadoMenuItemActionPerformed

    private void editoraPrecoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editoraPrecoMenuItemActionPerformed
        editoraPrecoDialog.setSize(500, 200);
        editoraPrecoDialog.setLocation(200, 200);
        editoraPrecoDialog.setVisible(true);
    }//GEN-LAST:event_editoraPrecoMenuItemActionPerformed

    private void pesquisarObraButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarObraButtonActionPerformed

            
        if(editoraTextField.getText().equals("")){
            JOptionPane.showMessageDialog(this,
                "Preencher editora",
                "Informação",
                JOptionPane.INFORMATION_MESSAGE);
        } else {
            if(precoTextField.getText().equals("")){
                JOptionPane.showMessageDialog(this,
                "Preencher preco mínimo",
                "Informação",
                JOptionPane.INFORMATION_MESSAGE);
            } else {
                try {
                    List<String> results = XPathFunctions.livros_editora_preco(editoraTextField.getText(),precoTextField.getText());
                    
                    if(results != null){
                        outputTextArea.setText("Obras de editora " + editoraTextField.getText() + " e preço mínomo de " + precoTextField.getText() + ":\n\n");
                        for (String result : results) {
                            outputTextArea.append(result + "\n");
                        }
                
                        editoraTextField.setText("");
                        precoTextField.setText("");
                        editoraPrecoDialog.setVisible(false);
                    } else {
                        JOptionPane.showMessageDialog(this,
                            "Obras não encontradas",
                            "Informação",
                            JOptionPane.INFORMATION_MESSAGE);
                        editoraTextField.setText("");
                        precoTextField.setText("");
                    }
                } catch (SaxonApiException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
                
        
    }//GEN-LAST:event_pesquisarObraButtonActionPerformed

    private void avgPrecoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgPrecoMenuItemActionPerformed
        try {
            double avgPreco = XPathFunctions.averagePriceOfAwardWinningAuthors();
            if(avgPreco != -1){
              JOptionPane.showMessageDialog(this,
                    "Média de preço é: " + avgPreco,
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);  
            } else {
                JOptionPane.showMessageDialog(this,
                    "Não existe média",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (SaxonApiException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_avgPrecoMenuItemActionPerformed

    private void adicionarEscritorDialogComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_adicionarEscritorDialogComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_adicionarEscritorDialogComponentHidden

    private void removerAtributoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerAtributoButtonActionPerformed
        Document doc = XMLJDomFunctions.lerDocumentoXML("escritores.xml");
        
        if(doc != null){
            
            if (ocupacaoRadioButton.isSelected()) {
                doc = EscritoresXML.removeInformacao(nomeEscritorTextField3.getText(), "ocupacoes", atributoTextField.getText(), doc);
                
            } else if (gLiterarioRadioButton.isSelected()) {
                doc = EscritoresXML.removeInformacao(nomeEscritorTextField3.getText(), "generoliterario", atributoTextField.getText(), doc);
                
            } else if (premiosRadioButton.isSelected()) {
                doc = EscritoresXML.removeInformacao(nomeEscritorTextField3.getText(), "premios", atributoTextField.getText(), doc);
                
            }
            
            if(doc != null){
                XMLJDomFunctions.escreverDocumentoParaFicheiro(doc, "escritores.xml");
                JOptionPane.showMessageDialog(this,
                        "Informação atualizada",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {

                JOptionPane.showMessageDialog(this,
                        "Atributo não encontrado",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
            }
            
        } else {
            JOptionPane.showMessageDialog(this,
                    "Ainda não existe ecritores adicionados",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        nomeEscritorTextField3.setText("");
        alterarTextField.setText("");
            
        nomeRadioButton.setSelected(false);
        nacionalidadeRadioButton.setSelected(false);
        dNascimentoRadioButton.setSelected(false);
        dFalecimentoRadioButton.setSelected(false);
        gLiterarioRadioButton.setSelected(false);
        ocupacaoRadioButton.setSelected(false);
        premiosRadioButton.setSelected(false);

        nomeEscritorTextField3.setEditable(true);
        alterarTextField.setEnabled(false);
        alterarEscritorButton.setEnabled(false);

        buttonGroup.clearSelection();

        nomeRadioButton.setEnabled(false);
        nacionalidadeRadioButton.setEnabled(false);
        dNascimentoRadioButton.setEnabled(false);
        dFalecimentoRadioButton.setEnabled(false);
        gLiterarioRadioButton.setEnabled(false);
        ocupacaoRadioButton.setEnabled(false);
        premiosRadioButton.setEnabled(false);

        enviarEscritorButton.setEnabled(true);
        
        adicionarAtributoButton.setEnabled(false);
        removerAtributoButton.setEnabled(false);
        atributoTextField.setText("");
    }//GEN-LAST:event_removerAtributoButtonActionPerformed

    private void adicionarAtributoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarAtributoButtonActionPerformed
        Document doc = XMLJDomFunctions.lerDocumentoXML("escritores.xml");
        
        if(doc != null){
            
            if (ocupacaoRadioButton.isSelected()) {
                doc = EscritoresXML.adicionaInformacao(nomeEscritorTextField3.getText(), "ocupacoes", atributoTextField.getText(), doc);
                
            } else if (gLiterarioRadioButton.isSelected()) {
                doc = EscritoresXML.adicionaInformacao(nomeEscritorTextField3.getText(), "generoliterario", atributoTextField.getText(), doc);
                
            } else if (premiosRadioButton.isSelected()) {
                doc = EscritoresXML.adicionaInformacao(nomeEscritorTextField3.getText(), "premios", atributoTextField.getText(), doc);
                
            }
            
            if(doc != null){
                XMLJDomFunctions.escreverDocumentoParaFicheiro(doc, "escritores.xml");
                JOptionPane.showMessageDialog(this,
                        "Informação atualizada",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {

                JOptionPane.showMessageDialog(this,
                        "Atributo não encontrado",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
            }
            
        } else {
            JOptionPane.showMessageDialog(this,
                    "Ainda não existe ecritores adicionados",
                    "Informação",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        nomeEscritorTextField3.setText("");
        alterarTextField.setText("");
            
        nomeRadioButton.setSelected(false);
        nacionalidadeRadioButton.setSelected(false);
        dNascimentoRadioButton.setSelected(false);
        dFalecimentoRadioButton.setSelected(false);
        gLiterarioRadioButton.setSelected(false);
        ocupacaoRadioButton.setSelected(false);
        premiosRadioButton.setSelected(false);

        nomeEscritorTextField3.setEditable(true);
        alterarTextField.setEnabled(false);
        alterarEscritorButton.setEnabled(false);

        buttonGroup.clearSelection();

        nomeRadioButton.setEnabled(false);
        nacionalidadeRadioButton.setEnabled(false);
        dNascimentoRadioButton.setEnabled(false);
        dFalecimentoRadioButton.setEnabled(false);
        gLiterarioRadioButton.setEnabled(false);
        ocupacaoRadioButton.setEnabled(false);
        premiosRadioButton.setEnabled(false);

        enviarEscritorButton.setEnabled(true);
        
        adicionarAtributoButton.setEnabled(false);
        removerAtributoButton.setEnabled(false);
        atributoTextField.setText("");
    }//GEN-LAST:event_adicionarAtributoButtonActionPerformed

    private void XLSTMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XLSTMenuActionPerformed
       
        
    }//GEN-LAST:event_XLSTMenuActionPerformed

    private void htmlEscritoresFotosMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htmlEscritoresFotosMenuItemActionPerformed
        boolean flag;
        try {
            flag = JDOMFunctions_XSLT.escritoresFotosTabela();
            if(!flag){
                JOptionPane.showMessageDialog(this,
                        "Ainda não existe ecritores adicionados",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_htmlEscritoresFotosMenuItemActionPerformed

    private void listagemEscritoresMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listagemEscritoresMenuItemActionPerformed
        
        try {
            boolean flag = JDOMFunctions_XSLT.listarEscritores();
            if(!flag)
                JOptionPane.showMessageDialog(this,
                        "Ainda não existe listagem de escritores",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try (Scanner ler = new Scanner (new FileInputStream("escritoresListagem.txt"))) {
                StringBuilder texto = new StringBuilder();
                String linha;
                while(ler.hasNextLine()){
                    linha = ler.nextLine();
                    texto = texto.append(linha).append("\n");
                }
                outputTextArea.setText("Listagem dos escritores no ficheiro xml:\n\n" + texto.toString());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                        "Ainda não existe listagem de escritores",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_listagemEscritoresMenuItemActionPerformed

    private void topObrasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topObrasMenuItemActionPerformed
        try {
            Document doc = SaxonFunctions_XQuery.top5ObrasCaras();
            
            if(doc != null){
                String texto;
                texto = Functions.ler_ficheiro("top5ObrasCaras.xml");
                if (texto != null){
                    outputTextArea.setText(texto);
                } else {
                    JOptionPane.showMessageDialog(this,
                        "Ainda não existe top 5 obras",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "Ainda não existe top 5 obras",
                        "Informação",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (XPathException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_topObrasMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem DTDMenuItem;
    private javax.swing.JMenu XLSTMenu;
    private javax.swing.JMenu XQueryMenu;
    private javax.swing.JMenuItem XSDMenuItem;
    private javax.swing.JMenuItem abrirMenuItem;
    private javax.swing.JButton adicionarAtributoButton;
    private javax.swing.JButton adicionarEscritorButton;
    private javax.swing.JDialog adicionarEscritorDialog;
    private javax.swing.JMenuItem adicionarEscritorMenuItem;
    private javax.swing.JButton alterarEscritorButton;
    private javax.swing.JTextField alterarTextField;
    private javax.swing.JTextField atributoTextField;
    private javax.swing.JMenuItem avgPrecoMenuItem;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JRadioButton dFalecimentoRadioButton;
    private javax.swing.JRadioButton dNascimentoRadioButton;
    private javax.swing.JDialog editarEscritorDialog;
    private javax.swing.JMenuItem editarEscritorMenuItem;
    private javax.swing.JDialog editoraPrecoDialog;
    private javax.swing.JMenuItem editoraPrecoMenuItem;
    private javax.swing.JTextField editoraTextField;
    private javax.swing.JButton enviarEscritorButton;
    private javax.swing.JMenuItem escritorPremiadoMenuItem;
    private javax.swing.JRadioButton gLiterarioRadioButton;
    private javax.swing.JMenuItem htmlEscritoresFotosMenuItem;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem listagemEscritoresMenuItem;
    private javax.swing.JRadioButton nacionalidadeRadioButton;
    private javax.swing.JTextField nomeEscritorTextField;
    private javax.swing.JTextField nomeEscritorTextField1;
    private javax.swing.JTextField nomeEscritorTextField2;
    private javax.swing.JTextField nomeEscritorTextField3;
    private javax.swing.JTextField nomeEscritorTextField4;
    private javax.swing.JTextField nomeNacionalidadeTextField;
    private javax.swing.JRadioButton nomeRadioButton;
    private javax.swing.JRadioButton ocupacaoRadioButton;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton pesquisarEscritorButton;
    private javax.swing.JDialog pesquisarEscritorDialog;
    private javax.swing.JMenuItem pesquisarEscritorMenuItem;
    private javax.swing.JButton pesquisarNacionalidadeButton;
    private javax.swing.JDialog pesquisarNacionalidadeDialog;
    private javax.swing.JMenuItem pesquisarNacionalidadeMenuItem;
    private javax.swing.JButton pesquisarObraButton;
    private javax.swing.JButton pesquisarObrasButton;
    private javax.swing.JDialog pesquisarObrasEscritorDialog;
    private javax.swing.JMenuItem pesquisarObrasEscritorMenuItem;
    private javax.swing.JTextField precoTextField;
    private javax.swing.JRadioButton premiosRadioButton;
    private javax.swing.JMenu principalMenu;
    private javax.swing.JButton removerAtributoButton;
    private javax.swing.JButton removerEscritorButton;
    private javax.swing.JDialog removerEscritorDialog;
    private javax.swing.JMenuItem removerEscritorMenuItem;
    private javax.swing.JMenuItem sairMenuItem;
    private javax.swing.JMenuItem topObrasMenuItem;
    private javax.swing.JMenu validarMenu;
    private javax.swing.JMenu xPathMenu;
    private javax.swing.JMenu xmlMenu;
    // End of variables declaration//GEN-END:variables
}
